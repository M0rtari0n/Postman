{
	"info": {
		"_postman_id": "bdb9fc34-1292-4b9f-8079-5e970db04618",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {                                                     // Статус код 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"First\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\")        // Проверить, что в body приходит правильный string.\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status_code_200\", function () {\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Your_name_Andrey\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Andrey\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Age_28\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"28\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Salary_1001\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(1001);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"req_Your_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"req_Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"var salary = parseInt(req.salary);\r",
							"\r",
							"pm.test(\"req_Salary\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"console.log(\"Name = \" + req.name);\r",
							"console.log(\"Age = \" + req.age);\r",
							"console.log(\"Salary = \" + salary);\r",
							"\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(\"Family = \" + JSON.stringify(jsonData.family));\r",
							"\r",
							"//  Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"salary*4\", function(){\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "default"
						},
						{
							"key": "age",
							"value": "28",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1001",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age)\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let salary = + req.salary\r",
							"pm.test(\"Salary\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(salary)\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log (\"Family = \" +JSON.stringify(jsonData.family));\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"var dog = jsonData.family.pets.dog\r",
							"\r",
							"pm.test('Параметр name есть', function(){\r",
							"    pm.expect(dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test('Параметр age есть', function(){\r",
							"    pm.expect(dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Dog 4\", function(){\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog Luky\", function(){\r",
							"    pm.expect(dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"console.log(\"Dog age = \"+ dog.age);\r",
							"console.log (\"Dog name = \" + dog.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Andrey&age=28&salary=1001",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1001"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"var req_age = parseInt(req.age);\r",
							"\r",
							"pm.test(\"age\",function(){\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"// Вывести в консоль параметр salary из response.\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(\"Salary_req = \" + req.salary);\r",
							"console.log(\"Salary_resp = \" + jsonData.salary);\r",
							"console.log(\"Salary_resp_0 = \" + jsonData.salary[0]);\r",
							"console.log(\"Salary_resp_1 = \" + jsonData.salary[1]);\r",
							"console.log(\"Salary_resp_2 = \" + jsonData.salary[2]);\r",
							"\r",
							"//  Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"test_salary_0\", function(){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+ req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"var sal_1 = String(req.salary*2);\r",
							"var sal_2 = String(req.salary*3);\r",
							"\r",
							"pm.test(\"test_salary*2\", function(){\r",
							"    pm.expect(jsonData.salary[1]).to.eql(sal_1);\r",
							"});\r",
							"\r",
							"pm.test(\"test_salary*3\", function(){\r",
							"    pm.expect(jsonData.salary[2]).to.eql(sal_2);\r",
							"});\r",
							"\r",
							"console.log(\"sal_1 = \" + sal_1);\r",
							"console.log(\"sal_2 = \" + sal_2);\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"// Передать в окружение переменную age\r",
							"// Передать в окружение переменную salary\r",
							"\r",
							"// Примечание: Если я все правильно понял, то можно не создавать переменные в ручную, а почтальон сам их создаст при передаче.\r",
							"\r",
							"var name = jsonData.name;\r",
							"var age = jsonData.age;\r",
							"var salary = jsonData.salary[0];\r",
							"\r",
							"pm.environment.set(\"name\", name);\r",
							"pm.environment.set(\"age\", age);\r",
							"pm.environment.set(\"salary\", salary);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"// var massive = [jsonData.salary[0], jsonData.salary[1], jsonData.salary[2]];\r",
							"\r",
							"// for (i=0; i<massive.length; i++) {\r",
							"//     console.log(\"cycle = \" + massive[i]);\r",
							"// }\r",
							"\r",
							"for (let i of jsonData.salary){\r",
							"     console.log(i)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Andrey&age=28&salary=1001",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1001"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"// Спарсить request.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"if(typeof jsonData.start_qa_salary === 'undefined')\r",
							"console.log('Поля start_qa_salary нет');\r",
							"else\r",
							"console.log('Поле start_qa_salary есть. Значение:' + jsonData.start_qa_salary);\r",
							"\r",
							"//  Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"if(typeof jsonData.qa_salary_after_6_months === 'undefined')\r",
							"console.log('Поля qa_salary_after_6_months нет');\r",
							"else\r",
							"console.log('Поле qa_salary_after_6_months есть. Значение:' +jsonData.qa_salary_after_6_months);\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"if(typeof jsonData.qa_salary_after_12_months === 'undefined')\r",
							"console.log('Поле qa_salary_after_12_months нет');\r",
							"else\r",
							"console.log('Поле qa_salary_after_12_months есть. Значение:' +jsonData.qa_salary_after_12_months);\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"if(typeof jsonData['qa_salary_after_1.5_year'] === 'undefined')\r",
							"console.log('Поле qa_salary_after_1.5_year нет');\r",
							"else\r",
							"console.log('Поле qa_salary_after_1.5_year есть. Значение:' + jsonData['qa_salary_after_1.5_year']);\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"if(typeof jsonData['qa_salary_after_3.5_years'] === 'undefined')\r",
							"console.log('Поле qa_salary_after_3.5_years нет');\r",
							"else\r",
							"console.log('Поле qa_salary_after_3.5_years есть. Значение:' +jsonData['qa_salary_after_3.5_years']);\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"\r",
							"if(typeof jsonData.person === 'undefined')\r",
							"console.log('Поле person нет');\r",
							"else\r",
							"console.log('Поле person есть. Значение:' +JSON.stringify(jsonData.person));\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('qa_salary_after_6_months', function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('qa_salary_after_12_months', function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('qa_salary_after_1.5_year', function(){\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req.salary*3.3)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('qa_salary_after_3.5_years', function(){\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary*3.8)\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Person_u_name_1', function(){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test('u_age', function(){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('u_salary_5_years', function(){\r",
							"    pm.expect(jsonData.u_salary_5_years).to.eql(req['salary*4.2'])\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}